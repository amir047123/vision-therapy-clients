  {/* Smooth game */}
      <div className="bg-white shadow-md p-5 rounded-lg">
        {/* first */}
        <div className="grid grid-cols-2 gap-5 items-center">
          <img className="w-18 mx-auto" src={smooth} alt="smooth" />
          <h2 className="text-2xl font-medium">Smooth Movement </h2>
        </div>
        {/* second */}
        <div className="grid grid-cols-2 gap-5 items-center mt-10">
          <div>
            <div className="h-1 w-full bg-neutral-200  rounded-full">
              <div
                className="h-1 bg-secondary rounded-full"
                style={{
                  width: `${
                    redBlueSmoothData?.length
                      ? Math.ceil(
                          ((300 - redBlueSmoothData[0]?.remainingTime) / 300) *
                            100,
                          2
                        )
                      : 0
                  }%`,
                }}
              ></div>
            </div>

            <button
              disabled={redBlueSmoothData[0]?.remainingTime < 1}
              onClick={openModalBlueRedSmoothMovementModal}
              className="bg-gray-50 border border-secondary py-2.5 px-6 rounded-md mx-auto w-fit block my-5 hover:scale-105 disabled:bg-green-100 duration-500  disabled:hover:scale-100"
            >
              {redBlueSmoothData[0]?.remainingTime ||
              redBlueSmoothData?.length === 0 ? (
                <img className="w-7" src={glass} alt="glass" />
              ) : (
                <img className="w-6" src={done} alt="glass" />
              )}
            </button>

            <BlueRedSmoothMovementModal
              isOpen={modalIsOpenBlueRedSmoothMovementModal}
              onRequestClose={closeModalBlueRedSmoothMovementModal}
            ></BlueRedSmoothMovementModal>
          </div>
          <div>
            <div className="h-1 w-full bg-neutral-200  rounded-full">
              <div
                className="h-1 bg-secondary rounded-full"
                style={{
                  width: `${
                    smoothData?.length
                      ? Math.ceil(
                          ((300 - smoothData[0]?.remainingTime) / 300) * 100,
                          2
                        )
                      : 0
                  }%`,
                }}
              ></div>
            </div>
            <div>
              <button
                disabled={smoothData[0]?.remainingTime < 1}
                className="bg-[#6f63f4] py-3 px-6 rounded-md mx-auto w-fit block my-5 hover:scale-105 duration-500 hover:bg-[rgb(111,99,244)] disabled:bg-green-100 disabled:hover:scale-100"
                onClick={openModalSmoothMovement}
              >
                {smoothData[0]?.remainingTime || smoothData?.length === 0 ? (
                  <img className="w-6" src={emoji} alt="glass" />
                ) : (
                  <img className="w-6" src={done} alt="glass" />
                )}
              </button>

              <ModalSmoothMovement
                isOpen={modalIsOpenSmoothMovement}
                onRequestClose={closeModalSmoothMovement}
              ></ModalSmoothMovement>
            </div>
          </div>
        </div>
      </div>

      {/* Rapid game */}
      <div className="bg-white shadow-md p-5 rounded-lg">
        {/* first */}
        <div className="grid grid-cols-2 gap-5 items-center">
          <img className="w-18 mx-auto" src={rapid} alt="smooth" />
          <h2 className="text-2xl font-medium">Rapid Movement</h2>
        </div>
        {/* second */}
        <div className="grid grid-cols-2 gap-5 items-center mt-10">
          <div>
            <div className="h-1 w-full bg-neutral-200  rounded-full">
              <div
                className="h-1 bg-secondary rounded-full"
                style={{
                  width: `${
                    redBlueRapidData?.length
                      ? Math.ceil(
                          ((300 - redBlueRapidData[0]?.remainingTime) / 300) *
                            100,
                          2
                        )
                      : 0
                  }%`,
                }}
              ></div>
            </div>
            <button
              disabled={redBlueRapidData[0]?.remainingTime < 1}
              onClick={openModalBlueRedRapidMovement}
              className="bg-gray-50 border border-secondary py-2.5 px-6 rounded-md mx-auto w-fit block my-5 hover:scale-105 duration-500  disabled:bg-green-100 disabled:hover:scale-100"
            >
              {redBlueRapidData[0]?.remainingTime ||
              redBlueRapidData?.length === 0 ? (
                <img className="w-7" src={glass} alt="glass" />
              ) : (
                <img className="w-6" src={done} alt="glass" />
              )}
            </button>

            <BlueRedRapidMovementModal
              isOpen={modalIsOpenBlueRedRapidMovement}
              onRequestClose={closeModalBlueRedRapidMovement}
            ></BlueRedRapidMovementModal>
          </div>
          <div>
            <div className="h-1 w-full bg-neutral-200  rounded-full">
              <div
                className="h-1 bg-secondary rounded-full"
                style={{
                  width: `${
                    rapidData?.length
                      ? Math.ceil(
                          ((300 - rapidData[0]?.remainingTime) / 300) * 100,
                          2
                        )
                      : 0
                  }%`,
                }}
              ></div>
            </div>{" "}
            <div>
              <button
                disabled={rapidData[0]?.remainingTime < 1}
                className="bg-[#7367F0] py-3 px-6 rounded-md mx-auto w-fit block my-5 hover:scale-105 duration-500 hover:bg-[rgb(111,99,244)] disabled:bg-green-100 disabled:hover:scale-10"
                onClick={openModalRapidMovement}
              >
                {rapidData[0]?.remainingTime || rapidData?.length === 0 ? (
                  <img className="w-6" src={emoji} alt="glass" />
                ) : (
                  <img className="w-6" src={done} alt="glass" />
                )}
              </button>

              <ModalRapidMovement
                isOpen={modalIsOpenRapidMovement}
                onRequestClose={closeModalRapidMovement}
              ></ModalRapidMovement>
            </div>
          </div>
        </div>
      </div>

      {/* Ping game */}
      <div className="bg-white shadow-md p-5 rounded-lg">
        {/* first */}
        <div className="grid grid-cols-2 gap-5 items-center">
          <img className="w-18 mx-auto" src={ping} alt="smooth" />
          <h2 className="text-2xl font-medium">Ping Pong</h2>
        </div>
        {/* second */}
        <div className="grid grid-cols-2 gap-5 items-center mt-10">
          <div>
            <div className="h-1 w-full bg-neutral-200  rounded-full">
              <div
                className="h-1 bg-secondary rounded-full"
                style={{
                  width: `${
                    redBluePingPongData?.length
                      ? Math.ceil(
                          ((300 - redBluePingPongData[0]?.remainingTime) /
                            300) *
                            100,
                          2
                        )
                      : 0
                  }%`,
                }}
              ></div>
            </div>
            <button
              disabled={redBluePingPongData[0]?.remainingTime < 1}
              onClick={openModalRedBluePingPong}
              className="bg-gray-50 border border-secondary py-2.5 px-6 rounded-md mx-auto w-fit block my-5 hover:scale-105 duration-500  disabled:bg-green-100 disabled:hover:scale-100"
            >
              {redBluePingPongData[0]?.remainingTime ||
              redBluePingPongData?.length === 0 ? (
                <img className="w-7" src={glass} alt="glass" />
              ) : (
                <img className="w-6" src={done} alt="glass" />
              )}
            </button>

            <BlueRedPingPongModal
              isOpen={modalIsOpenRedBluePingPong}
              onRequestClose={closeModalRedBluePingPong}
            ></BlueRedPingPongModal>
          </div>
          <div>
            <div className="h-1 w-full bg-neutral-200  rounded-full">
              <div
                className="h-1 bg-secondary rounded-full"
                style={{
                  width: `${
                    pingPongData?.length
                      ? Math.ceil(
                          ((300 - pingPongData[0]?.remainingTime) / 300) * 100,
                          2
                        )
                      : 0
                  }%`,
                }}
              ></div>
            </div>

            <div>
              <button
                disabled={pingPongData[0]?.remainingTime < 1}
                className="bg-[#7367F0] py-3 px-6 rounded-md mx-auto w-fit block my-5 hover:scale-105 duration-500 hover:bg-[rgb(111,99,244)] disabled:bg-green-100 disabled:hover:scale-100"
                onClick={openModalPingPong}
              >
                {pingPongData[0]?.remainingTime ||
                pingPongData?.length === 0 ? (
                  <img className="w-6" src={emoji} alt="glass" />
                ) : (
                  <img className="w-6" src={done} alt="glass" />
                )}
              </button>

              <ModalPingPong
                isOpen={modalIsOpenPingPong}
                onRequestClose={closeModalPingPong}
              ></ModalPingPong>
            </div>
          </div>
        </div>
      </div>

      {/* Rain Drop game */}
      <div className="bg-white shadow-md p-5 rounded-lg">
        {/* first */}
        <div className="grid grid-cols-2 gap-5 items-center">
          <img className="w-18 mx-auto" src={rain} alt="rain" />
          <h2 className="text-2xl font-medium">Rain Drop</h2>
        </div>
        {/* second */}
        <div className="grid grid-cols-2 gap-5 items-center mt-10">
          <div>
            <div className="h-1 w-full bg-neutral-200  rounded-full">
              <div
                className="h-1 bg-secondary rounded-full"
                style={{
                  width: `${
                    redBlueRainDropData?.length
                      ? Math.ceil(
                          ((300 - redBlueRainDropData[0]?.remainingTime) /
                            300) *
                            100,
                          2
                        )
                      : 0
                  }%`,
                }}
              ></div>
            </div>
            <button
              disabled={redBlueRainDropData[0]?.remainingTime < 1}
              onClick={openModalRedBlueRainDrop}
              className="bg-gray-50 border border-secondary py-2.5 px-6 rounded-md mx-auto w-fit block my-5 hover:scale-105 duration-500  disabled:bg-green-100 disabled:hover:scale-100"
            >
              {redBlueRainDropData[0]?.remainingTime ||
              redBlueRainDropData?.length === 0 ? (
                <img className="w-7" src={glass} alt="glass" />
              ) : (
                <img className="w-6" src={done} alt="glass" />
              )}
            </button>

            <BlueRedRainDropModal
              isOpen={modalIsOpenRedBlueRainDrop}
              onRequestClose={closeModalRedBlueRainDrop}
            ></BlueRedRainDropModal>
          </div>
          <div>
            <div className="h-1 w-full bg-neutral-200  rounded-full">
              <div
                className="h-1 bg-secondary rounded-full"
                style={{
                  width: `${
                    rainDropData?.length
                      ? Math.ceil(
                          ((300 - rainDropData[0]?.remainingTime) / 300) * 100,
                          2
                        )
                      : 0
                  }%`,
                }}
              ></div>
            </div>

            <div>
              <button
                disabled={rainDropData[0]?.remainingTime < 1}
                className="bg-[#7367F0] py-3 px-6 rounded-md mx-auto w-fit block my-5 hover:scale-105 duration-500 hover:bg-[rgb(111,99,244)] disabled:bg-green-100 disabled:hover:scale-100"
                onClick={openModalRainDrop}
              >
                {rainDropData[0]?.remainingTime ||
                rainDropData?.length === 0 ? (
                  <img className="w-6" src={emoji} alt="glass" />
                ) : (
                  <img className="w-6" src={done} alt="glass" />
                )}
              </button>
              <ModalRainDrop
                isOpen={modalIsOpenRainDrop}
                onRequestClose={closeModalRainDrop}
              ></ModalRainDrop>
            </div>
          </div>
        </div>
      </div>

      {/* Match Gabor  game */}
      <div className="bg-white shadow-md p-5 rounded-lg">
        {/* first */}
        <div className="grid grid-cols-2 gap-5 items-center">
          <img className="w-18 mx-auto" src={match} alt="Match Gabor " />
          <h2 className="text-2xl font-medium">Match Gabor </h2>
        </div>
        {/* second */}
        <div className="grid grid-cols-2 gap-5 items-center mt-10">
          <div>
            <div className="h-1 w-full bg-neutral-200  rounded-full">
              <div
                className="h-1 bg-secondary rounded-full"
                style={{
                  width: `${
                    matchGaborData?.length
                      ? Math.ceil(
                          ((300 - matchGaborData[0]?.remainingTime) / 300) *
                            100,
                          2
                        )
                      : 0
                  }%`,
                }}
              ></div>
            </div>
            <div>
              <button
                disabled={matchGaborData[0]?.remainingTime < 1}
                className="bg-[#7367F0] py-3 px-6 rounded-md mx-auto w-fit block my-5 hover:scale-105 duration-500 hover:bg-[rgb(111,99,244)] disabled:bg-green-100 disabled:hover:scale-100"
                onClick={openModalMatchGabor}
              >
                {matchGaborData[0]?.remainingTime ||
                matchGaborData?.length === 0 ? (
                  <img className="w-6" src={emoji} alt="glass" />
                ) : (
                  <img className="w-6" src={done} alt="glass" />
                )}
              </button>

              <ModalMatchGabor
                isOpen={modalIsOpenMatchGabor}
                onRequestClose={closeModalMatchGabor}
              ></ModalMatchGabor>
            </div>
          </div>
        </div>
      </div>

      {/* Random Obstacle  game */}
      <div className="bg-white shadow-md p-5 rounded-lg">
        {/* first */}
        <div className="grid grid-cols-2 gap-5 items-center">
          <img className="w-18 mx-auto" src={random} alt="Random Obstacle" />
          <h2 className="text-2xl font-medium">Random Obstacle</h2>
        </div>
        {/* second */}
        <div className="grid grid-cols-2 gap-5 items-center mt-10">
          <div>
            <div className="h-1 w-full bg-neutral-200  rounded-full">
              <div
                className="h-1 bg-secondary rounded-full"
                style={{
                  width: `${
                    redBlueRandomObstacleData?.length
                      ? Math.ceil(
                          ((300 - redBlueRandomObstacleData[0]?.remainingTime) /
                            300) *
                            100,
                          2
                        )
                      : 0
                  }%`,
                }}
              ></div>
            </div>
            <button
              disabled={redBlueRandomObstacleData[0]?.remainingTime < 1}
              onClick={openModalBlueRedRandomObstacle}
              className="bg-gray-50 border border-secondary py-2.5 px-6 rounded-md mx-auto w-fit block my-5 hover:scale-105 duration-500  disabled:bg-green-100 disabled:hover:scale-100"
            >
              {redBlueRandomObstacleData[0]?.remainingTime ||
              redBlueRandomObstacleData?.length === 0 ? (
                <img className="w-7" src={glass} alt="glass" />
              ) : (
                <img className="w-6" src={done} alt="glass" />
              )}
            </button>

            <BlueRedRandomObstacleModal
              isOpen={modalIsOpenBlueRedRandomObstacle}
              onRequestClose={closeModalBlueRedRandomObstacle}
            ></BlueRedRandomObstacleModal>
          </div>
          <div>
            <div className="h-1 w-full bg-neutral-200  rounded-full">
              <div
                className="h-1 bg-secondary rounded-full"
                style={{
                  width: `${
                    randomObstacleData?.length
                      ? Math.ceil(
                          ((300 - randomObstacleData[0]?.remainingTime) / 300) *
                            100,
                          2
                        )
                      : 0
                  }%`,
                }}
              ></div>
            </div>
            <div>
              <button
                disabled={randomObstacleData[0]?.remainingTime < 1}
                className="bg-[#7367F0] py-3 px-6 rounded-md mx-auto w-fit block my-5 hover:scale-105 duration-500 hover:bg-[rgb(111,99,244)] disabled:bg-green-100 disabled:hover:scale-100"
                onClick={openModalRandomObstacle}
              >
                {randomObstacleData[0]?.remainingTime ||
                randomObstacleData?.length === 0 ? (
                  <img className="w-6" src={emoji} alt="glass" />
                ) : (
                  <img className="w-6" src={done} alt="glass" />
                )}
              </button>
              <ModalRandomObstacle
                isOpen={modalIsOpenRandomObstacle}
                onRequestClose={closeModalRandomObstacle}
              ></ModalRandomObstacle>
            </div>
          </div>
        </div>
      </div>

      {/* serach quest */}
      <div className="bg-white shadow-md p-5 rounded-lg">
        {/* first */}
        <div className="grid grid-cols-2 gap-5 items-center">
          <img
            className="w-18 mx-auto"
            src={questsearch}
            alt="Random
Obstacle"
          />
          <h2 className="text-2xl font-medium">Search Quest</h2>
        </div>
        {/* second */}
        <div className="grid grid-cols-2 gap-5 items-center mt-10">
          <div>
            <div className="h-1 w-full bg-neutral-200  rounded-full">
              <div
                className="h-1 bg-secondary rounded-full"
                style={{
                  width: `${
                    redBlueSearchQuestData?.length
                      ? Math.ceil(
                          ((300 - redBlueSearchQuestData[0]?.remainingTime) /
                            300) *
                            100,
                          2
                        )
                      : 0
                  }%`,
                }}
              ></div>
            </div>
            <button
              disabled={redBlueSearchQuestData[0]?.remainingTime < 1}
              onClick={openModalRedBlueSearchQuest}
              className="bg-gray-50 border border-secondary py-2.5 px-6 rounded-md mx-auto w-fit block my-5 hover:scale-105 duration-500  disabled:bg-green-100 disabled:hover:scale-100"
            >
              {redBlueSearchQuestData[0]?.remainingTime ||
              redBlueSearchQuestData?.length === 0 ? (
                <img className="w-7" src={glass} alt="glass" />
              ) : (
                <img className="w-6" src={done} alt="glass" />
              )}
            </button>

            <BlueRedSearchQuestModal
              isOpen={modalIsOpenRedBlueSearchQuest}
              onRequestClose={closeModalRedBlueSearchQuest}
            ></BlueRedSearchQuestModal>
          </div>
          <div>
            <div className="h-1 w-full bg-neutral-200  rounded-full">
              <div
                className="h-1 bg-secondary rounded-full"
                style={{
                  width: `${
                    searchQuestData?.length
                      ? Math.ceil(
                          ((300 - searchQuestData[0]?.remainingTime) / 300) *
                            100,
                          2
                        )
                      : 0
                  }%`,
                }}
              ></div>
            </div>

            <div>
              <button
                disabled={searchQuestData[0]?.remainingTime < 1}
                className="bg-[#7367F0] py-3 px-6 rounded-md mx-auto w-fit block my-5 hover:scale-105 duration-500 hover:bg-[rgb(111,99,244)] disabled:bg-green-100 disabled:hover:scale-100"
                onClick={openModalSearchQuest}
              >
                {searchQuestData[0]?.remainingTime ||
                searchQuestData?.length === 0 ? (
                  <img className="w-6" src={emoji} alt="glass" />
                ) : (
                  <img className="w-6" src={done} alt="glass" />
                )}
              </button>
              <ModalSearchQuest
                isOpen={modalIsOpenSearchQuest}
                onRequestClose={closeModalSearchQuest}
              ></ModalSearchQuest>
            </div>
          </div>
        </div>
      </div>

      {/* Rock chart */}
      <div className="bg-white shadow-md p-5 rounded-lg">
        {/* first */}
        <div className="grid grid-cols-2 gap-5 items-center">
          <img
            className="w-18 mx-auto"
            src={RockChart}
            alt="Random
Obstacle"
          />
          <h2 className="text-2xl font-medium">Rock Chart</h2>
        </div>
        {/* second */}
        <div className="grid grid-cols-2 gap-5 items-center mt-10">
          <div>
            <div className="h-1 w-full bg-neutral-200  rounded-full">
              <div
                className="h-1 bg-secondary rounded-full"
                style={{
                  width: `${
                    redBlueRockChartData?.length
                      ? Math.ceil(
                          ((300 - redBlueRockChartData[0]?.remainingTime) /
                            300) *
                            100,
                          2
                        )
                      : 0
                  }%`,
                }}
              ></div>
            </div>
            <button
              disabled={redBlueRockChartData[0]?.remainingTime < 1}
              onClick={openModalBlueRedRockChart}
              className="bg-gray-50 border border-secondary py-2.5 px-6 rounded-md mx-auto w-fit block my-5 hover:scale-105 duration-500  disabled:bg-green-100 disabled:hover:scale-100"
            >
              {redBlueRockChartData[0]?.remainingTime ||
              redBlueRockChartData?.length === 0 ? (
                <img className="w-7" src={glass} alt="glass" />
              ) : (
                <img className="w-6" src={done} alt="glass" />
              )}
            </button>
            <BlueRedRockChartModal
              isOpen={modalIsOpenBlueRedRockChart}
              onRequestClose={closeModalBlueRedRockChart}
            ></BlueRedRockChartModal>
          </div>
          <div>
            <div className="h-1 w-full bg-neutral-200  rounded-full">
              <div
                className="h-1 bg-secondary rounded-full"
                style={{
                  width: `${
                    rockChartData?.length
                      ? Math.ceil(
                          ((300 - rockChartData[0]?.remainingTime) / 300) * 100,
                          2
                        )
                      : 0
                  }%`,
                }}
              ></div>
            </div>

            <div>
              <button
                disabled={rockChartData[0]?.remainingTime < 1}
                className="bg-[#7367F0] py-3 px-6 rounded-md mx-auto w-fit block my-5 hover:scale-105 duration-500 hover:bg-[rgb(111,99,244)] disabled:bg-green-100 disabled:hover:scale-100"
                onClick={openModalRockChart}
              >
                {rockChartData[0]?.remainingTime ||
                rockChartData?.length === 0 ? (
                  <img className="w-6" src={emoji} alt="glass" />
                ) : (
                  <img className="w-6" src={done} alt="glass" />
                )}
              </button>

              <ModalRockChart
                isOpen={modalIsOpenRockChart}
                onRequestClose={closeModalRockChart}
              ></ModalRockChart>
            </div>
          </div>
        </div>
      </div>

      {/* Smooth-Movement */}
      <div className="bg-white shadow-md p-5 rounded-lg">
        {/* first */}
        <div className="grid grid-cols-2 gap-5 items-center">
          <img
            className="w-18 mx-auto"
            src={TheShooter}
            alt="Random
Obstacle"
          />
          <h2 className="text-2xl font-medium">The Shooter</h2>
        </div>
        {/* second */}
        <div className="grid grid-cols-2 gap-5 items-center mt-10">
          <div>
            <div className="h-1 w-full bg-neutral-200  rounded-full">
              <div
                className="h-1 bg-secondary rounded-full"
                style={{
                  width: `${
                    redBlueTheShooterData?.length
                      ? Math.ceil(
                          ((300 - redBlueTheShooterData[0]?.remainingTime) /
                            300) *
                            100,
                          2
                        )
                      : 0
                  }%`,
                }}
              ></div>
            </div>
            <button
              disabled={redBlueTheShooterData[0]?.remainingTime < 1}
              onClick={openModalBlueRedTheShooter}
              className="bg-gray-50 border border-secondary py-2.5 px-6 rounded-md mx-auto w-fit block my-5 hover:scale-105 duration-500  disabled:bg-green-100 disabled:hover:scale-100"
            >
              {redBlueTheShooterData[0]?.remainingTime ||
              redBlueTheShooterData?.length === 0 ? (
                <img className="w-7" src={glass} alt="glass" />
              ) : (
                <img className="w-6" src={done} alt="glass" />
              )}
            </button>
            <BlueRedTheShooterModal
              isOpen={modalIsOpenBlueRedTheShooter}
              onRequestClose={closeModalBlueRedTheShooter}
            ></BlueRedTheShooterModal>
          </div>
          <div>
            <div className="h-1 w-full bg-neutral-200  rounded-full">
              <div
                className="h-1 bg-secondary rounded-full"
                style={{
                  width: `${
                    theShooterData?.length
                      ? Math.ceil(
                          ((300 - theShooterData[0]?.remainingTime) / 300) *
                            100,
                          2
                        )
                      : 0
                  }%`,
                }}
              ></div>
            </div>

            <div>
              <button
                disabled={theShooterData[0]?.remainingTime < 1}
                className="bg-[#7367F0] py-3 px-6 rounded-md mx-auto w-fit block my-5 hover:scale-105 duration-500 hover:bg-[rgb(111,99,244)] disabled:bg-green-100 disabled:hover:scale-100"
                onClick={openModalTheShooter}
              >
                {theShooterData[0]?.remainingTime ||
                theShooterData?.length === 0 ? (
                  <img className="w-6" src={emoji} alt="glass" />
                ) : (
                  <img className="w-6" src={done} alt="glass" />
                )}
              </button>
              <ModalTheShooter
                isOpen={modalIsOpenTheShooter}
                onRequestClose={closeModalTheShooter}
              ></ModalTheShooter>
            </div>
          </div>
        </div>
      </div>

      {/* colorMatchPuzzle */}

      <div className="bg-white shadow-md p-5 rounded-lg">
        {/* first */}
        <div className="grid grid-cols-2 gap-5 items-center">
          <img
            className="w-18 mx-auto"
            src={Colortrap}
            alt="Random
Obstacle"
          />
          <h2 className="text-2xl font-medium">Color Trap</h2>
        </div>
        {/* second */}
        <div className="grid grid-cols-2 gap-5 items-center mt-10">
          <div>
            <div className="h-1 w-full bg-neutral-200  rounded-full">
              <div
                className="h-1 bg-secondary rounded-full"
                style={{
                  width: `${
                    colorTrapData?.length
                      ? Math.ceil(
                          ((300 - colorTrapData[0]?.remainingTime) / 300) * 100,
                          2
                        )
                      : 0
                  }%`,
                }}
              ></div>
            </div>

            <div>
              <button
                disabled={colorTrapData[0]?.remainingTime < 1}
                className="bg-[#7367F0] py-3 px-6 rounded-md mx-auto w-fit block my-5 hover:scale-105 duration-500 hover:bg-[rgb(111,99,244)] disabled:bg-green-100 disabled:hover:scale-100"
                onClick={openModalColorTrap}
              >
                {colorTrapData[0]?.remainingTime ||
                colorTrapData?.length === 0 ? (
                  <img className="w-6" src={emoji} alt="glass" />
                ) : (
                  <img className="w-6" src={done} alt="glass" />
                )}
              </button>

              <ModalColorTrap
                isOpen={modalIsOpenColorTrap}
                onRequestClose={closeModalColorTrap}
              ></ModalColorTrap>
            </div>
          </div>
        </div>
      </div>